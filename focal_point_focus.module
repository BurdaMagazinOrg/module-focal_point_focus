<?php

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function focal_point_focus_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  if ('crop' == $entity_type->id()) {
     $fields['focus_crop_coords'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Focus Crop Rectangle Coordinates'))
      ->setDescription(t('Corners of the crop rectangle (x1,y1,x2,y2).'))
      ->setCardinality(4);
  }

  return $fields;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function focal_point_focus_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (get_class($context['widget']) === 'Drupal\image\Plugin\Field\FieldWidget\ImageWidget') {
    // Find processing callback of focal point module and replace it with ours.
    foreach ($element['#process'] as &$cb) {
      if (is_array($cb) && $cb[0] == 'Drupal\focal_point\Plugin\Field\FieldWidget\FocalPointImageWidget' && $cb[1] == 'process') {
        $cb = ['Drupal\focal_point_focus\Plugin\Field\FieldWidget\FocalPointFocusImageWidget', 'process'];
        break;
      }
    }

    // Replace value callback with ours.
    $element['#value_callback'] = array('Drupal\focal_point_focus\Plugin\Field\FieldWidget\FocalPointFocusImageWidget', 'value');
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Saves the crop rect values for the image file entity about to be saved.
 */
function focal_point_focus_entity_presave(EntityInterface $entity) {
  // Only worry about entities that are fieldable.
  if ($entity instanceof Drupal\Core\Entity\FieldableEntityInterface) {
    // Loop all the fields and save focal point values for images.
    foreach ($entity->getFieldDefinitions() as $key => $value) {
      if ($value->getType() == 'image' && $entity->hasField($value->getName())) {
        // Loop through all values for this field. Its cardinality might be > 1.
        foreach ($entity->{$value->getName()} as $item) {
          if (isset($item->crop_rect) && ! empty($item->crop_rect)) {
            $crop_type = \Drupal::config('focal_point.settings')->get('crop_type');
            $crop = \Drupal::service('focal_point.manager')->getCropEntity($item->entity, $crop_type);
            $crop->focus_crop_coords = explode(',', $item->crop_rect);
            $crop->save();
          }
        }
      }
    }
  }
}
